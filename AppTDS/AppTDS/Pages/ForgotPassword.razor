@page "/forgotpassword"
@using AppTDS.Models
@inject NavigationManager Navigation
@inject RegistrationSystem RegistrationSystem

<h3>Esqueci a Senha</h3>

<EditForm Model="@forgotPasswordModel" OnValidSubmit="HandleForgotPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Email:</label>
        <InputText @bind-Value="forgotPasswordModel.Email" />
    </div>
    <button type="submit">Enviar Código de Verificação</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (isVerificationCodeSent)
{
    <EditForm Model="@resetPasswordModel" OnValidSubmit="HandleResetPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Código de Verificação:</label>
            <InputText @bind-Value="resetPasswordModel.VerificationCode" />
        </div>
        <div>
            <label>Nova Senha:</label>
            <InputText @bind-Value="resetPasswordModel.NewPassword" type="password" />
        </div>
        <button type="submit">Redefinir Senha</button>
    </EditForm>
}

@code {
    private ForgotPasswordModel forgotPasswordModel = new ForgotPasswordModel();
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();
    private string errorMessage;
    private string successMessage;
    private bool isVerificationCodeSent = false;

    private async Task HandleForgotPassword()
    {
        if (string.IsNullOrWhiteSpace(forgotPasswordModel.Email))
        {
            errorMessage = "O campo de email é obrigatório.";
            return;
        }

        if (!IsValidEmail(forgotPasswordModel.Email))
        {
            errorMessage = "Formato de email inválido.";
            return;
        }

        try
        {
            var result = await RegistrationSystem.RequestPasswordRecoveryAsync(forgotPasswordModel.Email);
            if (result)
            {
                successMessage = "Código de verificação enviado para o seu email.";
                isVerificationCodeSent = true;
            }
            else
            {
                errorMessage = "Email não encontrado.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao solicitar recuperação de senha: {ex.Message}";
        }
    }

    private async Task HandleResetPassword()
    {
        if (string.IsNullOrWhiteSpace(resetPasswordModel.VerificationCode) ||
            string.IsNullOrWhiteSpace(resetPasswordModel.NewPassword))
        {
            errorMessage = "Todos os campos são obrigatórios.";
            return;
        }

        try
        {
            var result = await RegistrationSystem.RecoverPasswordAsync(forgotPasswordModel.Email, resetPasswordModel.NewPassword, resetPasswordModel.VerificationCode);
            if (result)
            {
                successMessage = "Senha redefinida com sucesso.";
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Código de verificação inválido ou expirado.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao redefinir senha: {ex.Message}";
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    public class ForgotPasswordModel
    {
        public string Email { get; set; }
    }

    public class ResetPasswordModel
    {
        public string VerificationCode { get; set; }
        public string NewPassword { get; set; }
    }
}
